const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const express = require('express');
const { createClient } = require('@supabase/supabase-js');
const axios = require('axios');
const { GoogleGenerativeAI } = require("@google/generative-ai");

// ===================================================================================
// ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è API KEYS & SECRETS: ‡∂∏‡∑ö ‡∂ö‡∑ú‡∂ß‡∑É ‡∑Ñ‡∂ª‡∑í‡∂∫‡∂ß‡∂∏ ‡∂¥‡∑î‡∂ª‡∑Ä‡∂±‡∑ä‡∂± ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è
// ===================================================================================
const SUPABASE_URL = "https://geahwtilgbxlviwnbrcz.supabase.co";
const SUPABASE_KEY = "eyJhbGciOiJIINiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdlYWh3dGlsZ2J4bHZpd25icmN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA4MTU4NzUsImV4cCI6MjA3NjM5MTg3NX0.eU5_re2SQNf_ysg5n-BiLORQimOOg5p-CX2uAaRbbrY";
const HCTI_API_USER_ID = "c55fa120-18bc-4c7b-9cd3-f2580f44441d";
const HCTI_API_KEY = "1d850262-610c-4af3-b27e-617506f87e28";
const GEMINI_API_KEY = "AIzaSyBQpw3aKpJzyQCAT2vUUCdDO4m3Loe9GeM"; // <-- ‡∂∏‡∑ô‡∂≠‡∂±‡∂ß ‡∂î‡∂∫‡∑è‡∂ú‡∑ö ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä Gemini Key ‡∂ë‡∂ö ‡∂Ø‡∑è‡∂±‡∑ä‡∂±
// ===================================================================================

const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

const app = express();
const PORT = process.env.PORT || 8000;
const SESSION_EXPIRY_MINUTES = 15;
const DELIVERY_CHARGE = 400;

console.log('Bot ‡∂ë‡∂ö ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è...');

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-accelerated-2d-canvas', '--no-first-run', '--no-zygote', '--single-process', '--disable-gpu'],
    },
});

client.on('qr', qr => {
    console.log('QR Code ‡∂Ω‡∑ê‡∂∂‡∑î‡∂±‡∑è, Replit Console ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä scan ‡∂ö‡∂ª‡∂±‡∑ä‡∂±:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => console.log('Client ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂∫‡∑í! Bot ‡∑Ä‡∑ê‡∂© ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂Ω‡∑ë‡∑É‡∑ä‡∂≠‡∑í‡∂∫‡∑í.'));

async function updateUserState(userId, state, orderDetails = {}) {
    const { error } = await supabase.from('conversations').upsert({ user_id: userId, state: state, order_details: orderDetails }, { onConflict: 'user_id' });
    if (error) console.error('Error updating user state:', error);
}

async function deleteUserState(userId) {
    const { error } = await supabase.from('conversations').delete().eq('user_id', userId);
    if (error) console.error('Error deleting user state:', error);
}

function generateBillHtml(orderDetails) {
    const { selected_product, customer_name, address, city } = orderDetails;
    const totalAmount = parseFloat(selected_product.price) + DELIVERY_CHARGE;
    const currentDate = new Date().toLocaleDateString('en-CA');
    return `<html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><style>@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');body{font-family:'Poppins',sans-serif;margin:0;padding:25px;background-color:#f9f9f9;width:350px;}.invoice-box{background:white;padding:20px;border-radius:10px;box-shadow:0 0 15px rgba(0,0,0,0.08);}h1{font-size:24px;color:#333;text-align:center;margin-bottom:5px;}.shop-name{font-size:16px;color:#555;text-align:center;margin-bottom:20px;}.details{margin-bottom:20px;font-size:12px;}.details p{margin:2px 0;color:#444;}.item-table{width:100%;border-collapse:collapse;margin-bottom:15px;}.item-table th,.item-table td{padding:8px;font-size:12px;text-align:left;border-bottom:1px solid #eee;}.item-table th{background:#f2f2f2;font-weight:600;}.total-section{text-align:right;margin-top:15px;}.total-section p{margin:4px 0;font-size:13px;}.total-section .grand-total{font-weight:600;font-size:14px;color:#000;}.footer{text-align:center;margin-top:20px;font-size:11px;color:#888;}</style></head><body><div class="invoice-box"><h1>WonderNest</h1><p class="shop-name">Order Invoice</p><div class="details"><p><b>Billed To:</b> ${customer_name}</p><p><b>Address:</b> ${address}, ${city}</p><p><b>Date:</b> ${currentDate}</p></div><table class="item-table"><thead><tr><th>Item</th><th>Price</th></tr></thead><tbody><tr><td>${selected_product.name}</td><td>Rs. ${selected_product.price.toFixed(2)}</td></tr></tbody></table><div class="total-section"><p>Subtotal: Rs. ${selected_product.price.toFixed(2)}</p><p>Delivery Fee: Rs. ${DELIVERY_CHARGE.toFixed(2)}</p><p class="grand-total">TOTAL: Rs. ${totalAmount.toFixed(2)}</p></div><p class="footer">Thank you for your order!</p></div></body></html>`;
}

async function getProvinceFromGemini(city) {
    try {
        const prompt = `In which province of Sri Lanka is the city "${city}" located? Answer only with the province name in English (e.g., "Western", "Central", "Southern"). If you don't know, answer "Unknown".`;
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text().toLowerCase();

        if (text.includes("western")) {
            return "Western";
        } else {
            return "Other";
        }
    } catch (error) {
        console.error("Gemini API Error:", error);
        return "Unknown"; // Return a default value on error
    }
}

client.on('message', async (message) => {
    const user_id = message.from;
    const messageText = message.body ? message.body.trim().toLowerCase() : '';
    const originalMessageText = message.body ? message.body.trim() : '';

    const { data: userData } = await supabase.from('conversations').select('*').eq('user_id', user_id).single();
    
    let currentState = 'main_menu';
    let currentOrderDetails = {};
    let sessionExpired = false;

    if (userData) {
        const lastUpdated = new Date(userData.updated_at);
        const diffMinutes = (new Date().getTime() - lastUpdated.getTime()) / 60000;
        if (diffMinutes >= SESSION_EXPIRY_MINUTES) {
            sessionExpired = true;
        } else {
            currentState = userData.state;
            currentOrderDetails = userData.order_details || {};
        }
    }

    console.log(`User: ${user_id}, State: ${currentState}, Expired: ${sessionExpired}, Message: "${originalMessageText}"`);

    const mainMenu = "1Ô∏è‚É£ *‡∂á‡∂´‡∑Ä‡∑î‡∂∏‡∂ö‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß*\n" +
                     "2Ô∏è‚É£ *‡∂∂‡∑ô‡∂Ø‡∑è‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑í‡∂±‡∂∫ ‡∂Ø‡∑ê‡∂±‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß*\n" +
                     "3Ô∏è‚É£ *‡∂ú‡∑ô‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏*\n" +
                     "4Ô∏è‚É£ *‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î*\n" +
                     "5Ô∏è‚É£ *‡∂±‡∑í‡∂∫‡∑ù‡∂¢‡∑í‡∂≠‡∂∫‡∑ô‡∂ö‡∑î ‡∑Ñ‡∑è ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ì‡∂∏‡∂ß*";
    
    async function sendMainMenu(isWelcome = false) {
        let header = "*‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä ‡∑Ä‡∑ô‡∂≠ ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂¥‡∑ê‡∂∏‡∑í‡∂´‡∑í‡∂∫‡∑è.*\n\n";
        if (isWelcome) header = "üëã *WonderNest ‡∑Ä‡∑ô‡∂≠ ‡∂î‡∂∂‡∑Ä ‡∑É‡∑è‡∂Ø‡∂ª‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂ú‡∂±‡∑í‡∂∏‡∑î!*\n\n";
        if (sessionExpired) header = "‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂â‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ñ ‡∂±‡∑í‡∑É‡∑è, ‡∂Ö‡∂¥‡∑í ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂∏‡∑î‡∂Ω ‡∑É‡∑í‡∂ß ‡∂¥‡∂ß‡∂±‡∑ä ‡∂ú‡∂±‡∑í‡∂∏‡∑î!\n\n";
        await client.sendMessage(user_id, `${header}‡∂î‡∂∂‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∑É‡∑ö‡∑Ä‡∑è‡∑Ä ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂Ö‡∂¥ ‡∑Ä‡∑ô‡∂≠ type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n${mainMenu}`);
        await updateUserState(user_id, 'main_menu', {});
    }

    if (sessionExpired) return await sendMainMenu();
    if (['0', 'cancel', 'back'].includes(messageText)) return await sendMainMenu();
    const welcomeCommands = ['hi', 'hello', '‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä', 'menu', '/start', 'wondernest ‡∑Ñ‡∑è ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ñ‡∑Ä‡∑è‡∂ß ‡∑É‡∑î‡∂∑ ‡∂Ø‡∑Ä‡∑É‡∂ö‡∑ä'];
    if (welcomeCommands.includes(messageText)) return await sendMainMenu(true);
    
    switch (currentState) {
        case 'main_menu':
            switch (originalMessageText) {
                case '1':
                    const { data: products, error } = await supabase.from('products').select('*').order('id');
                    if (error || !products || products.length === 0) {
                        await client.sendMessage(user_id, "‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂∑‡∑è‡∂´‡∑ä‡∂© ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫.");
                        return await sendMainMenu();
                    }
                    let productListMsg = "‚ú® *WonderNest ‡∂∑‡∑è‡∂´‡∑ä‡∂© ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä* ‚ú®\n\n";
                    products.forEach((p, i) => productListMsg += `*${i + 1}.* ${p.name}\n*‡∂∏‡∑í‡∂Ω:* ‡∂ª‡∑î. ${p.price}.00\n\n`);
                    productListMsg += "‡∂î‡∂∂‡∂ß ‡∂á‡∂´‡∑Ä‡∑î‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∑ö ‡∂Ö‡∂Ç‡∂ö‡∂∫ ‡∂Ö‡∂¥ ‡∑Ä‡∑ô‡∂≠ type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.";
                    await client.sendMessage(user_id, productListMsg);
                    await updateUserState(user_id, 'ordering_item', { products });
                    break;
                case '2':
                    await client.sendMessage(user_id, "‡∂∂‡∑ô‡∂Ø‡∑è‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑í‡∂±‡∂∫ ‡∂Ø‡∑ê‡∂±‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∂±‡∂ú‡∂ª‡∂∫ (City) ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
                    await updateUserState(user_id, 'awaiting_city_delivery');
                    break;
                case '3':
                    await client.sendMessage(user_id, "üí≥ *‡∂ú‡∑ô‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏*\n\nüíµ *Cash on Delivery (COD):* ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑î ‡∂¥‡∑É‡∑î ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂ú‡∑ô‡∑Ä‡∂±‡∑ä‡∂±.\n\nüè¶ *Bank Transfer:* ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∂ú‡∑í‡∂´‡∑î‡∂∏‡∂ß ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂ª‡∑í‡∑É‡∑í‡∂ß‡∑ä‡∂¥‡∂≠ ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.");
                    await sendMainMenu();
                    break;
                case '4':
                    await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∏‡∑ô‡∑Ñ‡∑í type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
                    await updateUserState(user_id, 'awaiting_agent_question');
                    break;
                case '5':
                    await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø‡∂ö‡∑ä ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±, ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂±‡∑í‡∂∫‡∑ù‡∂¢‡∑í‡∂≠‡∂∫‡∑ô‡∂ö‡∑î ‡∂î‡∂∂‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∂±‡∑î ‡∂á‡∂≠.");
                    console.log(`AGENT ALERT: User ${user_id} requested an agent.`);
                    await deleteUserState(user_id);
                    break;
                default:
                    await client.sendMessage(user_id, "‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂∏‡∂ß ‡∂≠‡∑ö‡∂ª‡∑î‡∂´‡∑ö ‡∂±‡∑ê‡∂≠. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥‡∂∫‡∂ö‡∑ä (1-5) ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±.");
                    break;
            }
            break;

        case 'ordering_item':
            const itemNumber = parseInt(messageText) - 1;
            const products = currentOrderDetails.products;
            if (isNaN(itemNumber) || itemNumber < 0 || itemNumber >= products.length) {
                return await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∑‡∑è‡∂´‡∑ä‡∂© ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
            }
            const selectedProduct = products[itemNumber];
            currentOrderDetails.selected_product = selectedProduct;
            let detailsMsg = `*${selectedProduct.name}*\n\n*‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫:* ${selectedProduct.description}\n\n*‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∑ö ‡∂∏‡∑í‡∂Ω:* ‡∂ª‡∑î. ${selectedProduct.price}.00\n*‡∂∂‡∑ô‡∂Ø‡∑è‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏‡∑ö ‡∂ú‡∑è‡∑É‡∑ä‡∂≠‡∑î‡∑Ä:* ‡∂ª‡∑î. ${DELIVERY_CHARGE}.00\n---------------------------------\n*‡∂ú‡∑ô‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î ‡∂∏‡∑î‡∑Ö‡∑î ‡∂∏‡∑î‡∂Ø‡∂Ω:* ‡∂ª‡∑î. ${parseFloat(selectedProduct.price) + DELIVERY_CHARGE}.00\n\n‡∂∏‡∑ô‡∂∏ ‡∂∑‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∂á‡∂´‡∑Ä‡∑î‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂î‡∂∂ ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í‡∂Ø? (‡∂î‡∑Ä‡∑ä / ‡∂±‡∑ê‡∑Ñ‡∑ê)\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.`;
            await client.sendMessage(user_id, detailsMsg);
            await updateUserState(user_id, 'awaiting_confirmation', currentOrderDetails);
            break;

        case 'awaiting_confirmation':
            if (['‡∂î‡∑Ä‡∑ä', 'ow'].includes(messageText)) {
                await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ß ‡∂ú‡∑ô‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:\n\n1Ô∏è‚É£ *Cash on Delivery*\n2Ô∏è‚É£ *Bank Transfer*\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
                await updateUserState(user_id, 'awaiting_payment_method', currentOrderDetails);
            } else if (['‡∂±‡∑ê‡∑Ñ‡∑ê', 'naha'].includes(messageText)) {
                await client.sendMessage(user_id, "‡∂á‡∂´‡∑Ä‡∑î‡∂∏ ‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì.");
                await sendMainMenu();
            } else await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª '‡∂î‡∑Ä‡∑ä' ‡∑Ñ‡∑ù '‡∂±‡∑ê‡∑Ñ‡∑ê' ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
            break;

        case 'awaiting_payment_method':
            if (messageText === '1' || messageText.includes('cash')) {
                currentOrderDetails.payment_method = 'Cash on Delivery';
                await client.sendMessage(user_id, "üöö ‡∂î‡∂∂‡∂ú‡∑ö ‡∂á‡∂´‡∑Ä‡∑î‡∂∏ ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ñ‡∂≠ ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª *‡∂ë‡∂ö‡∂∏ message ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä*, ‡∂¥‡∑ö‡∑Ö‡∑í 5‡∂ö‡∑í‡∂±‡∑ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ô‡∂±‡∑ä‡∂±:\n\nFull Name\nAddress\nMobile Number\nCity\nDistrict\n\n*‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä:*\nTharusha Dulshan\nNo.123, Main Street, Kandy\n0771234567\nKandy\nKandy\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
                await updateUserState(user_id, 'awaiting_address', currentOrderDetails);
            } else if (messageText === '2' || messageText.includes('bank')) {
                await client.sendMessage(user_id, "üè¶ *‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∂ú‡∑ô‡∑Ä‡∑ì‡∂∏‡∑ä ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª*\n\nBank: [Your Bank Name]\nAccount: [Your Account Number]\nName: WonderNest\n\n‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª ‡∂ª‡∑í‡∑É‡∑í‡∂ß‡∑ä‡∂¥‡∂≠‡∑ö ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±. ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂±‡∑í‡∂∫‡∑ù‡∂¢‡∑í‡∂≠‡∂∫‡∑ô‡∂ö‡∑î ‡∂î‡∂∂‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∂±‡∑î ‡∂á‡∂≠.");
                await deleteUserState(user_id);
            } else await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂ú‡∑ô‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂± ('1' ‡∑Ñ‡∑ù '2').\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
            break;

        case 'awaiting_address':
            const addressLines = originalMessageText.split('\n');
            if (addressLines.length >= 5) {
                currentOrderDetails.customer_name = addressLines[0];
                currentOrderDetails.address = addressLines[1];
                currentOrderDetails.mobile_number = addressLines[2];
                currentOrderDetails.city = addressLines[3];
                currentOrderDetails.district = addressLines[4];
                let confirmationMsg = "*‡∂î‡∂∂‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*\n\n";
                confirmationMsg += `*‡∂±‡∂∏:* ${addressLines[0]}\n*‡∂Ω‡∑í‡∂¥‡∑í‡∂±‡∂∫:* ${addressLines[1]}\n*‡∂Ø‡∑î‡∂ª‡∂ö‡∂Æ‡∂± ‡∂Ö‡∂Ç‡∂ö‡∂∫:* ${addressLines[2]}\n*‡∂±‡∂ú‡∂ª‡∂∫:* ${addressLines[3]}\n*‡∂Ø‡∑í‡∑É‡∑ä‡∂≠‡∑ä‚Äç‡∂ª‡∑í‡∂ö‡∑ä‡∂ö‡∂∫:* ${addressLines[4]}\n\n`;
                confirmationMsg += "‡∂â‡∑Ñ‡∂≠ ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂±‡∂∏‡∑ä '‡∂î‡∑Ä‡∑ä' ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±. ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂±‡∂∏‡∑ä '‡∂±‡∑ê‡∑Ñ‡∑ê' ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.";
                await client.sendMessage(user_id, confirmationMsg);
                await updateUserState(user_id, 'awaiting_final_confirmation', currentOrderDetails);
            } else await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂â‡∑Ñ‡∂≠ ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª (‡∂Ö‡∑Ä‡∂∏ ‡∑Ä‡∑Å‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ö‡∑Ö‡∑í 5‡∂ö‡∑ä) ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∂ë‡∂ö‡∂∏ message ‡∂ë‡∂ö‡∂ö‡∑í‡∂±‡∑ä type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
            break;
        
        case 'awaiting_final_confirmation':
            if (['‡∂î‡∑Ä‡∑ä', 'ow'].includes(messageText)) {
                await client.sendMessage(user_id, "‡∂î‡∂∂‡∂ú‡∑ö ‡∂á‡∂´‡∑Ä‡∑î‡∂∏ ‡∂Ö‡∂¥ ‡∑Ä‡∑ô‡∂≠ ‡∂Ω‡∑ê‡∂∂‡∑ì ‡∂á‡∂≠. Bill‡∂¥‡∂≠ ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ú‡∑Ñ‡∑ú‡∂≠‡∂ö‡∑ä ‡∂ª‡∑ê‡∂≥‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±...");
                try {
                    const billHtml = generateBillHtml(currentOrderDetails);
                    const response = await axios.post('https://hcti.io/v1/image', { html: billHtml }, { auth: { username: HCTI_API_USER_ID, password: HCTI_API_KEY } });
                    const media = await MessageMedia.fromUrl(response.data.url);
                    await client.sendMessage(user_id, media, { caption: `‚úÖ *‡∂á‡∂´‡∑Ä‡∑î‡∂∏ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í!* ‚úÖ\n\n‡∂î‡∂∂‡∂ú‡∑ö ‡∂∂‡∑í‡∂Ω‡∑ä‡∂¥‡∂≠ ‡∂â‡∑Ñ‡∂≠ ‡∂Ø‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ö. ‡∂∂‡∑ô‡∂Ø‡∑è‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏ ‡∂Ø‡∑í‡∂± 3-4‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠ ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∂±‡∑î ‡∂á‡∂≠. ‡∂Ö‡∂¥ ‡∑Ñ‡∑è ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∑ñ‡∑Ä‡∑è‡∂ß ‡∑É‡∑ä‡∂≠‡∑ñ‡∂≠‡∑í‡∂∫‡∑í!` });
                } catch (billError) {
                    console.error("Bill generation failed:", billError.response ? billError.response.data : billError.message);
                    await client.sendMessage(user_id, "‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂∂‡∑í‡∂Ω‡∑ä‡∂¥‡∂≠ ‡∑É‡∑ë‡∂Ø‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫. ‡∂±‡∂∏‡∑î‡∂≠‡∑ä ‡∂î‡∂∂‡∂ú‡∑ö ‡∂á‡∂´‡∑Ä‡∑î‡∂∏ ‡∂Ö‡∂¥ ‡∑Ä‡∑ô‡∂≠ ‡∂Ω‡∑ê‡∂∂‡∑ì ‡∂á‡∂≠. ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂±‡∑í‡∂∫‡∑ù‡∂¢‡∑í‡∂≠‡∂∫‡∑ô‡∂ö‡∑î ‡∂î‡∂∂‡∑Ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∂±‡∑î ‡∂á‡∂≠.");
                }
                await deleteUserState(user_id);
            } else if (['‡∂±‡∑ê‡∑Ñ‡∑ê', 'naha'].includes(messageText)) {
                await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂î‡∂∂‡∂ú‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\nFull Name\nAddress\nMobile Number\nCity\nDistrict\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
                await updateUserState(user_id, 'awaiting_address', currentOrderDetails);
            } else await client.sendMessage(user_id, "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª '‡∂î‡∑Ä‡∑ä' ‡∑Ñ‡∑ù '‡∂±‡∑ê‡∑Ñ‡∑ê' ‡∂Ω‡∑ô‡∑É type ‡∂ö‡∂ª ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.\n\n*0.* ‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂∏‡∑ô‡∂±‡∑î‡∑Ä‡∂ß ‡∂∫‡∑ë‡∂∏‡∂ß.");
            break;
            
        case 'awaiting_city_delivery':
            const province = await getProvinceFromGemini(originalMessageText);
            let deliveryEstimate;
            if (province === 'Western') {
                deliveryEstimate = `*${originalMessageText}* ‡∂±‡∂ú‡∂ª‡∂∫ ‡∂∂‡∑É‡∑ä‡∂±‡∑è‡∑Ñ‡∑í‡∂ª ‡∂¥‡∑Ö‡∑è‡∂≠‡∂ß ‡∂Ö‡∂∫‡∂≠‡∑ä ‡∑Ä‡∑ö.\nüöö ‡∂∂‡∑É‡∑ä‡∂±‡∑è‡∑Ñ‡∑í‡∂ª ‡∂¥‡∑Ö‡∑è‡∂≠ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ø‡∑í‡∂± 1-4‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠ ‡∂∂‡∑ô‡∂Ø‡∑è‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏ ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑ö.`;
            } else {
                deliveryEstimate = `*${originalMessageText}* ‡∂±‡∂ú‡∂ª‡∂∫ ‡∑É‡∂≥‡∑Ñ‡∑è, üöö ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫‡∂∫‡∑ô‡∂±‡∑ä ‡∂Ø‡∑í‡∂± 3-5‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠ ‡∂∂‡∑ô‡∂Ø‡∑è‡∑Ñ‡∑ê‡∂ª‡∑ì‡∂∏ ‡∑É‡∑í‡∂Ø‡∑î ‡∑Ä‡∑ö.`;
            }
            await client.sendMessage(user_id, deliveryEstimate);
            await sendMainMenu();
            break;

        case 'awaiting_agent_question':
            await client.sendMessage(user_id, "‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂Ö‡∂¥ ‡∑Ä‡∑ô‡∂≠ ‡∂Ω‡∑ê‡∂∂‡∑î‡∂´‡∑í. ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∂±‡∑í‡∂∫‡∑ù‡∂¢‡∑í‡∂≠‡∂∫‡∑ô‡∂ö‡∑î ‡∂î‡∂∂‡∑Ä ‡∂â‡∂ö‡∑ä‡∂∏‡∂±‡∑í‡∂±‡∑ä ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ö‡∂ª‡∂ú‡∂±‡∑î ‡∂á‡∂≠. ‡∑É‡∑ä‡∂≠‡∑ñ‡∂≠‡∑í‡∂∫‡∑í!");
            console.log(`AGENT ALERT: User ${user_id} asked: "${originalMessageText}"`);
            await deleteUserState(user_id);
            break;
    }
});

client.initialize();
app.get('/', (req, res) => res.send('WhatsApp Bot is running and ready!'));
app.listen(PORT, '0.0.0.0', () => console.log(`Server is running on port: ${PORT}`));
